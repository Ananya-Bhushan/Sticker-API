// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	domain "clean-arch/domain"
	time "time"

	mock "github.com/stretchr/testify/mock"

)

// StickerUsecase is an autogenerated mock type for the StickerUsecase type
type StickerUsecase struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: currentTime
func (_m *StickerUsecase) GetByID(currentTime time.Time) ([]domain.Trendingsticker, error) {
	ret := _m.Called(currentTime)

	var r0 []domain.Trendingsticker
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) ([]domain.Trendingsticker, error)); ok {
		return rf(currentTime)
	}
	if rf, ok := ret.Get(0).(func(time.Time) []domain.Trendingsticker); ok {
		r0 = rf(currentTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Trendingsticker)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(currentTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStickerUsecase creates a new instance of StickerUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStickerUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *StickerUsecase {
	mock := &StickerUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
